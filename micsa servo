#include <Servo.h>

#define BOTAO_B1 PC13
#define sensorPin A0

Servo servo1;
Servo servo2;

int modo = 0;
int angle = 51;  
int step = 1;  
unsigned long ultimaTroca = 0;
const int debounceDelay = 200;
const int minAngle = 50;
const int maxAngle = 180;
const int pontoInicial = 51;

// Velocidades para cada modo
int velocidades[] = {999999, 15, 6, 1};  

void setup() {
    pinMode(BOTAO_B1, INPUT_PULLUP);
    
    Serial.begin(115200);  

    servo1.attach(7);
    servo2.attach(4); 

    servo1.write(angle);  
    servo2.write(angle);
}

void loop() {
    verificarBotao();
    verificarSensor();
    
    if (modo != 0) {  
        moverServo();
    } else {
        servo1.write(pontoInicial);
        servo2.write(pontoInicial);
    }
}


int readSensor() {
    int sensorValue = analogRead(sensorPin);  
    int outputValue = map(sensorValue, 0, 1023, 255, 0);  
    return outputValue;  
}


void verificarBotao() {
    static bool estadoAnterior = HIGH;
    bool estadoAtual = digitalRead(BOTAO_B1);

    if (estadoAnterior == HIGH && estadoAtual == LOW && (millis() - ultimaTroca) > debounceDelay) {
        modo = (modo + 1) % 4;  
        Serial.print("Modo alterado manualmente para: ");
        Serial.println(modo);
        ultimaTroca = millis();
    }

    estadoAnterior = estadoAtual;
}


void verificarSensor() {
    int valorA0 = readSensor();
    Serial.print("Leitura A0: ");
    Serial.println(valorA0);

    // Ajusta o modo conforme o sensor
    if (valorA0 > 150) {
        modo = 3;  
    } else if (valorA0 > 100) {
        modo = 2;  
    } else if (valorA0 > 25) {
        modo = 1;  
    } else {
        modo = 0;  
    }

    Serial.print("Modo atual: ");
    Serial.println(modo);
}

// Movimenta os servos conforme o modo
void moverServo() {
    static unsigned long ultimaAtualizacao = 0;
    int velocidadeAtual = velocidades[modo];  

    if (millis() - ultimaAtualizacao > velocidadeAtual) {
        angle += step;
        servo1.write(angle);
        servo2.write(angle);
        ultimaAtualizacao = millis();

        
        if (angle >= maxAngle || angle <= minAngle) {
            step = -step;
        }
    }
}
